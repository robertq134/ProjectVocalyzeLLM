# -*- coding: utf-8 -*-
"""EmotionalRecognition_1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iGXCKlYeexdZFTNXu5_--fDrSTZWlQY3

# Emotion Recognition
"""

# Install the packages we need
!pip install transformers torch torchaudio librosa

import torch
import torchaudio
import librosa
from transformers import pipeline
import numpy as np

# Load a different emotion recognition model that's more reliable
try:
    # This uses a different model that's easier to work with
    emotion_pipeline = pipeline(
        "audio-classification",
        model="ehcalabres/wav2vec2-lg-xlsr-en-speech-emotion-recognition",
        device=0 if torch.cuda.is_available() else -1
    )
    print("✅ Emotion model loaded successfully!")
except Exception as e:
    print(f"❌ Error loading model: {e}")

def analyze_emotion_simple(audio_file):
    try:
        # Load audio with librosa (handles different formats better)
        audio, sr = librosa.load(audio_file, sr=16000)

        # Get emotion prediction
        result = emotion_pipeline(audio)

        # Get the top prediction
        top_emotion = result[0]

        return {
            'emotion': top_emotion['label'],
            'confidence': top_emotion['score'],
            'all_results': result
        }

    except Exception as e:
        print(f"Error: {e}")
        return None

print("Analysis function ready!")

# Upload your file again if needed
from google.colab import files

# If you need to upload again:
uploaded = files.upload()
audio_filename = list(uploaded.keys())[0]

# Or if you still have it from before, just use:
# audio_filename = "your_file_name.mp3"

# Analyze the emotion
result = analyze_emotion_simple(audio_filename)

if result:
    print("EMOTION ANALYSIS RESULTS:")
    print(f"Predicted Emotion: {result['emotion']}")
    print(f"Confidence: {result['confidence']:.3f}")

    print("\nAll predictions:")
    for pred in result['all_results'][:3]:  # Show top 3
        print(f"  {pred['label']}: {pred['score']:.3f}")
else:
    print("Analysis failed")